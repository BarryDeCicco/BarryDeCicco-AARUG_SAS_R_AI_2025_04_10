---
title: "AARUG SAS to R with AI (April 10,  2025)"
format: html
editor: visual
---

# Converting SAS Code to R Using Free AI

-   [ChatGPT version 4.0](https://chatgpt.com)

-   [ClaudeAI](https://claude.ai "https://claude.ai")

-   [CodeConvert](https://app.codeconvert.ai/)

-   [DeepSeek](https://chat.deepseek.com/)

## My Experience So Far:

-   Has mainly been in SAS =\> Python/PySpark/Pandas

-   Conversion by 'paragraph' (small block) is 90% correct.

-   This means that converting a large block of code will result in code with multiple errors, and that you will have to go back to converting in short chunks.

## First Conversion - Simple SAS Code:

This sets up a data set, inputs the values, calculates a chi-squared value and print the results.

**data chisq; input df; chirat = cinv(.995,df)/cinv(.005,df);**

**datalines; 20 21 22 23 24 25 26 27 28 29 30 ;**

**run;**

**proc print data=chisq; var df chirat;**

**run;**

+---------------+
| Results       |
+===============+
| Obs df chirat |
|               |
| 1 20 5.38037  |
|               |
| 2 21 5.15345  |
|               |
| 3 22 4.95164  |
|               |
| 4 23 4.77098  |
|               |
| 5 24 4.60828  |
|               |
| 6 25 4.46097  |
|               |
| 7 26 4.32696  |
|               |
| 8 27 4.20449  |
|               |
| 9 28 4.09213  |
|               |
| 10 29 3.98865 |
|               |
| 11 30 3.89302 |
+---------------+

1.  ChatGPT:

```{r ChatGPT_1}
#| echo: true


# Define the degrees of freedom
df <- 20:30

# Calculate the chi-square ratio
chirat <- qchisq(0.995, df) / qchisq(0.005, df)

# Combine into a data frame
chisq <- data.frame(df, chirat)

# View the result
print(chisq)

```

2.  ClaudeAI:

```{r ClaudAI_1}
#| echo: true


# Create a data frame with the df values
df_values <- c(20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)
chisq <- data.frame(df = df_values)
# Calculate the ratio of chi-square critical values
# In SAS: cinv(.995,df)/cinv(.005,df)
# In R: qchisq(.995,df)/qchisq(.005,df)
chisq$chirat <- qchisq(0.995, chisq$df) / qchisq(0.005, chisq$df)
# Display the result
print(chisq)

```

3.  CodeConvert:

```{r Code_Converter_1}
#| echo: true

# Load required library for statistical functions (qchisq is in base R's stats package)
library(stats)

# Create a data frame 'chisq' with the variable 'df'
chisq <- data.frame(df = c(
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30
))

# Compute 'chirat' as the ratio of chi-square inverse quantiles
chisq$chirat <- qchisq(0.995, chisq$df) / qchisq(0.005, chisq$df)

# Print the data frame showing only the variables 'df' and 'chirat'
print(chisq[, c("df", "chirat")])



```

4.  Deekseek:

```{r DeepSeek_1}
#| echo: true


# Create a data frame with degrees of freedom
df <- c(20:30)

# Calculate the chi-square ratio for each df
chirat <- qchisq(0.995, df) / qchisq(0.005, df)

# Combine into a data frame
chisq <- data.frame(df, chirat)

# Print the results
print(chisq)

```

### Observations:

1.  Each AI came out with slightly different code.
2.  All ran without error.
3.  Each AI achieved the same result.
4.  Each AI listed information about what they did (below is from ClaudeAI

\>Here's the conversion of your SAS code to R:

```         
# Create a data frame with the df values<p>
df_values <- c(20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) 
<p>chisq <- data.frame(df = df_values)  
<p> # Calculate the ratio of chi-square critical values 
<p># In SAS: cinv(.995,df)/cinv(.005,df) 
<p># In R: qchisq(.995,df)/qchisq(.005,df) 
<p>chisq$chirat <- qchisq(0.995, chisq$df) / qchisq(0.005, chisq$df)  
<p># Display the result 
<p>print(chisq)  
```

I've converted your SAS code to R. The key differences in the conversion:

1.  In SAS, you use `cinv()` to get chi-square critical values, while in R the equivalent function is `qchisq()`

2.  Data input in R is handled by creating vectors and data frames directly rather than using the `datalines` approach in SAS

3.  The calculation logic remains the same: finding the ratio between the 99.5th and 0.5th percentiles of the chi-square distribution for each degree of freedom

4.  When you run this R code, it will create a data frame with the same calculations as your original SAS code.

## Second Conversion - Aggregation:

This uses an array to calculate values for more than one variable. NOTE: the SAS data set was different from the R data set;

<p>

I manually loaded the R version.

``` sas
{sas SAS_Aggregate_1}
#| eval: false


* https://blogs.sas.com/content/iml/2014/12/01/max-and-min-rows-and-cols.html;

data iris_II;
    input SepalLength SepalWidth PetalLength PetalWidth Species $;
    datalines;
5.1 3.5 1.4 0.2 setosa
4.9 3.0 1.4 0.2 setosa
4.7 3.2 1.3 0.2 setosa
4.6 3.1 1.5 0.2 setosa
5.0 3.6 1.4 0.2 setosa
5.4 3.9 1.7 0.4 setosa
4.6 3.4 1.4 0.3 setosa
5.0 3.4 1.5 0.2 setosa
4.4 2.9 1.4 0.2 setosa
4.9 3.1 1.5 0.1 setosa
;
run;

proc print data=iris_II;
run;


data MinMaxRows;
   set iris_II;
   array x {*} _numeric_;    /* x[1] is 1st var,...,x[4] is 4th var */
   min = min(of x[*]);       /* min value for this observation */
   max = max(of x[*]);       /* max value for this observation */
run;
proc print data=MinMaxRows(obs=7);
   var _numeric_;
run;
```

![](images/clipboard-1423748803.png)

1.  ChatGPT:

```{r ChatGPT_2}
#| echo: true

# Copy the iris dataset
MinMaxRows <- iris

# Compute min and max across numeric columns for each row
numeric_cols <- sapply(MinMaxRows, is.numeric)
MinMaxRows$min <- apply(MinMaxRows[, numeric_cols], 1, min)
MinMaxRows$max <- apply(MinMaxRows[, numeric_cols], 1, max)

# Print the first 7 observations of only numeric columns (including min and max)
print(MinMaxRows[1:7, c(which(numeric_cols), which(names(MinMaxRows) %in% c("min", "max")))])


```

2.  ClaudeAI:

```{r ClaudAI_2}
#| echo: true

# Load necessary libraries
library(dplyr)

# Read in the iris dataset (which is built-in to R)
# This is equivalent to SAS's sashelp.Iris
iris_data <- iris

# Create min and max columns for numeric variables
# In R, we need to specify which columns to use
# We'll exclude the Species column since it's categorical
MinMaxRows <- iris_data %>%
  rowwise() %>%
  mutate(
    min = min(c_across(where(is.numeric))),
    max = max(c_across(where(is.numeric)))
  ) %>%
  ungroup()

# Print the first 7 rows of numeric columns
# Display all numeric columns including the new min and max
MinMaxRows %>%
  select(where(is.numeric)) %>%
  head(7)


```

3.  CodeConvert:

```{r Code_Converter_2}
#| echo: true

# Load required datasets package which contains the 'iris' dataset
library(datasets)

# Create data frame MinMaxRows from the iris dataset (equivalent to SAS: "set sashelp.Iris;")
MinMaxRows <- iris

# array x {*} _numeric_;    /* x[1] is 1st var,...,x[4] is 4th var */
# In R, we identify the numeric columns from MinMaxRows. Here x corresponds to all numeric columns.
# Compute the row-wise minimum of numeric variables.
MinMaxRows$min <- apply(MinMaxRows[sapply(MinMaxRows, is.numeric)], 1, min)    # min value for this observation

# Compute the row-wise maximum of numeric variables.
MinMaxRows$max <- apply(MinMaxRows[sapply(MinMaxRows, is.numeric)], 1, max)    # max value for this observation

# proc print data=MinMaxRows(obs=7);
#    var _numeric_;
# In R, we print the first 7 observations of numeric variables (including the newly added min and max)
print(MinMaxRows[sapply(MinMaxRows, is.numeric)][1:7,])



```

4.  Deepseek (this gave me both base R and Tidyverse versions):

In the first run, this failed due not loading the 'Purr' package;

<p>

the *pmap_dbl* function was not found.

Therefore, I added it manually

```{r DeepSeek_2}
#| echo: true

# Using dplyr for data manipulation
library(dplyr)
library(purrr)

# Load the iris dataset (equivalent to sashelp.Iris in SAS)
MinMaxRows <- iris %>%
  mutate(
    # Calculate min and max across numeric columns for each row
    min = pmap_dbl(select(., where(is.numeric)), min),
    max = pmap_dbl(select(., where(is.numeric)), max)
  )

# Print first 7 rows of all numeric columns (equivalent to PROC PRINT)
head(MinMaxRows, 7) %>% 
  select(where(is.numeric))  # Select only numeric columns for display

```

## Final Conversion - RETAIN Statement:

This sets up a data set, inputs the values, then calculates new values,

using the previous row's values. This **carries values across rows**.

This is something that SAS is good at, and you would see a lot in SAS code.

Note: for some languages, such as PySpark (a distributed version of Python),

carrying values across rows is not the 'natural' way of doing things, since the data set is partitioned into chunks, for parallel manipulation.

```{sas retain_3}
#| echo: true
#| eval: false

data abcd;
input x y;
cards;
1 25
1 28
1 27
2 23
2 35
2 34
3 25
3 29
;
run;


data aaa;
set abcd;
retain z 0;
z = z + y;
run;

proc print data = aaa;
run;


```

![](images/clipboard-2780755875.png)

1.  ChatGPT:

```{r ChatGPT_3}
#| echo: true

# Create the data frame (equivalent to `data abcd; input x y;`)
abcd <- data.frame(
  x = c(1, 1, 1, 2, 2, 2, 3, 3),
  y = c(25, 28, 27, 23, 35, 34, 25, 29)
)

# Create new data frame with cumulative sum of y (like `retain z; z = z + y;`)
aaa <- abcd
aaa$z <- cumsum(aaa$y)

# Print the result (like `proc print`)
print(aaa)



```

2.  ClaudeAI:

```{r ClaudAI_3}
#| echo: true

# Create a data frame equivalent to 'data abcd'
abcd <- data.frame(
  x = c(1, 1, 1, 2, 2, 2, 3, 3),
  y = c(25, 28, 27, 23, 35, 34, 25, 29)
)

# Create a new data frame 'aaa' with a cumulative sum of y
aaa <- abcd
aaa$z <- cumsum(aaa$y)

# Print the resulting data frame (equivalent to proc print)
print(aaa)


```

3.  CodeConvert:

```{r Code_Converter_3}
#| echo: true

# Required dependencies and imports (base R functions are used; no additional packages are needed)

# Creating the dataset 'abcd' equivalent to the SAS DATA step "data abcd;"
abcd <- read.table(text = "1 25
1 28
1 27
2 23
2 35
2 34
3 25
3 29", header = FALSE)
names(abcd) <- c("x", "y")
# End of dataset 'abcd' creation

# Creating the dataset 'aaa' equivalent to the SAS DATA step "data aaa;"
aaa <- abcd

# Retain variable 'z' with an initial value of 0 (equivalent to "retain z 0;" in SAS)
aaa$z <- 0

# Iteratively update 'z' by adding 'y' to it for each row, mimicking "z = z + y;" in SAS
for(i in 1:nrow(aaa)){
  if(i == 1){
    aaa$z[i] <- aaa$y[i]  # For the first row, z = 0 + y
  } else {
    aaa$z[i] <- aaa$z[i - 1] + aaa$y[i]  # For subsequent rows, accumulate the sum
  }
}
# End of dataset 'aaa' creation

# Printing the dataset 'aaa' equivalent to "proc print data=aaa;" in SAS
print(aaa)






```

4.  Deekseek:

```{r DeepSeek_3}
#| echo: true

# Create data frame
abcd <- data.frame(
  x = c(1, 1, 1, 2, 2, 2, 3, 3),
  y = c(25, 28, 27, 23, 35, 34, 25, 29)
)

# Calculate cumulative sum by group
aaa <- abcd
aaa$z <- ave(aaa$y, aaa$x, FUN = cumsum)

# Print result
print(aaa)

```
